{"remainingRequest":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/src/views/products/Index.vue?vue&type=template&id=49b9cd61&","dependencies":[{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/src/views/products/Index.vue","mtime":1685447306942},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}