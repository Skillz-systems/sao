{"remainingRequest":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/src/views/projects/GetCoordinates.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/src/views/projects/GetCoordinates.vue","mtime":1669925487880},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsonly/Documents/tentacular/all_in_one/sao/sao-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCltkaXJdIC5mb3JtLWNvbnRyb2w6Zm9jdXMgew0KICBib3JkZXItY29sb3I6ICM0RDZEOEE7DQp9DQo="},{"version":3,"sources":["GetCoordinates.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuOA;AACA;AACA","file":"GetCoordinates.vue","sourceRoot":"src/views/projects","sourcesContent":["<template>\r\n  <div>\r\n    <b-card>\r\n      <validation-observer ref=\"editProductValidation\">\r\n        <b-form @submit.prevent>\r\n          <h4 style=\"color: #4D6D8A; margin-top: 0.5em\">\r\n            Edit-coordinate\r\n          </h4>\r\n\r\n          <b-col lg=\"12\">\r\n            <b-form-group>\r\n              <label\r\n                for=\"state\"\r\n                class=\"mt-lg-0 mt-1 mb-lg-1 font-weight-bolder\"\r\n              >\r\n                Address\r\n              </label>\r\n              <vue-google-autocomplete\r\n                id=\"map\"\r\n                ref=\"address\"\r\n                classname=\"form-control\"\r\n                placeholder=\"Please type your current address\"\r\n                country=\"ng\"\r\n                @placechanged=\"getAddressData\"\r\n              />\r\n            </b-form-group>\r\n          </b-col>\r\n\r\n          <div class=\"d-flex float-right mt-1\">\r\n            <b-button\r\n              style=\"background-color: #C4C4C4 !important; border-color: #C4C4C4 !important; border-radius: 40px; margin-right: 1em\"\r\n              @click=\"backToProject\"\r\n            >\r\n              Cancel\r\n            </b-button>\r\n            <b-button\r\n              v-if=\"!isLoading\"\r\n              type=\"submit\"\r\n              style=\"background-color: #4D6D8A !important; border-color: #4D6D8A !important; border-radius: 40px;\"\r\n              @click=\"saveChanges\"\r\n            >\r\n              Save Changes\r\n            </b-button>\r\n            <b-button\r\n              v-if=\"isLoading\"\r\n              disabled\r\n              style=\"background-color: #4D6D8A !important; border-color: #4D6D8A !important; border-radius: 40px;\"\r\n            >\r\n              Saving...\r\n            </b-button>\r\n          </div>\r\n        </b-form>\r\n      </validation-observer>\r\n    </b-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { required } from \"@validations\";\r\nimport Vue from \"vue\";\r\nimport { ValidationProvider, ValidationObserver } from \"vee-validate\";\r\n\r\nimport { avatarText } from \"@core/utils/filter\";\r\n// import VueNumerals from 'vue-numerals';\r\nimport axios from \"axios\";\r\nimport VueGoogleAutocomplete from \"vue-google-autocomplete\";\r\nimport GetCoordinates from \"./GetCoordinates.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    ValidationProvider,\r\n    ValidationObserver,\r\n    VueGoogleAutocomplete,\r\n  },\r\n  data() {\r\n    return {\r\n      accessoryType: [],\r\n      isLoading: false,\r\n      currentPassword: null,\r\n      newPassword: null,\r\n      required,\r\n      accessory: null,\r\n      installationAddress: \"\",\r\n      isLoading: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSubItems(6);\r\n    console.log(this.$router.history.current.params.id, \"djsjjs\");\r\n  },\r\n  created() {\r\n    this.getSubItems(6);\r\n  },\r\n  methods: {\r\n    backToProject() {\r\n      this.$router.go(-1);\r\n    },\r\n    async saveChanges() {\r\n      if (!this.installationAddress.lat) {\r\n        // alert();\r\n        this.toast(\r\n          \"GEOLOCATION\",\r\n          \"CheckCircleIcon\",\r\n          \"select location\",\r\n          \"danger\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      this.isLoading = true;\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"log\", this.installationAddress.lat);\r\n      formData.append(\"lat\", this.installationAddress.long);\r\n\r\n      const token = localStorage.getItem(\"token\");\r\n      axios.defaults.headers.Authorization = `Bearer ${token}`;\r\n\r\n      try {\r\n        const res = await axios.post(\r\n          `${process.env.VUE_APP_BASE_URL}/updategeoaddress/${this.$router.history.current.params.id}`,\r\n          formData\r\n        );\r\n\r\n        this.isLoading = false;\r\n\r\n        // alert();\r\n        this.toast(\r\n          \"GEOLOCATION\",\r\n          \"CheckCircleIcon\",\r\n          res?.data?.message,\r\n          \"success\"\r\n        );\r\n        this.$router.go(-1);\r\n      } catch (error) {\r\n        this.isLoading = false;\r\n        this.toast(\r\n          \"GEOLOCATION\",\r\n          \"CheckCircleIcon\",\r\n          error.response.data?.message,\r\n          \"danger\"\r\n        );\r\n        // alert();\r\n        console.log(error);\r\n      }\r\n    },\r\n    getAddressData(addressData, placeResultData, id) {\r\n      const addressLat = {\r\n        lat: addressData.latitude,\r\n        long: addressData.longitude,\r\n        country: addressData.country,\r\n        route: addressData.route,\r\n        locality: addressData.locality,\r\n      };\r\n      this.installationAddress = addressLat;\r\n    },\r\n    updatePassword() {\r\n      this.isLoading = true;\r\n      this.$refs.updatePasswordValidation.validate().then((success) => {\r\n        if (success) {\r\n          const form = {\r\n            currentPassword: this.currentPassword,\r\n            newPassword: this.newPassword,\r\n          };\r\n          this.$store\r\n            .dispatch(\"account/updatePassword\", { form })\r\n            .then((res) => {\r\n              this.isLoading = false;\r\n              const { message } = res.data;\r\n              this.toast(\r\n                \"Update Password\",\r\n                \"CheckCircleIcon\",\r\n                message,\r\n                \"success\"\r\n              );\r\n            })\r\n            .catch((err) => {\r\n              this.isLoading = false;\r\n              this.toast(\r\n                \"Update Password\",\r\n                \"SlashIcon\",\r\n                err.response.data.message,\r\n                \"danger\"\r\n              );\r\n            });\r\n        } else {\r\n          this.isLoading = false;\r\n          this.toast(\r\n            \"Update Password Attempt\",\r\n            \"AlertTriangleIcon\",\r\n            \"You must fill in all required fields\",\r\n            \"warning\"\r\n          );\r\n        }\r\n      });\r\n    },\r\n    getSubItems(item) {\r\n      const itemID = item;\r\n      this.$store\r\n        .dispatch(\"inventory/getSubItemByID\", { itemID })\r\n        .then((res) => {\r\n          const { data } = res.data;\r\n\r\n          if (item === 2) {\r\n            data.forEach((subItem) => {\r\n              const systemSize = { value: subItem.id, text: subItem.name };\r\n              this.systemSizes.push(systemSize);\r\n            });\r\n          } else if (item === 1) {\r\n            data.forEach((subItem) => {\r\n              const inverterType = { value: subItem.id, text: subItem.name };\r\n              this.inverterTypes.push(inverterType);\r\n            });\r\n          } else if (item === 6) {\r\n            data.forEach((subItem) => {\r\n              const accessoryType = { value: subItem.id, text: subItem.name };\r\n              this.accessoryType.push(accessoryType);\r\n            });\r\n          } else {\r\n            data.forEach((subItem) => {\r\n              const batteryType = { value: subItem.id, text: subItem.name };\r\n              this.batteryTypes.push(batteryType);\r\n            });\r\n          }\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n[dir] .form-control:focus {\r\n  border-color: #4D6D8A;\r\n}\r\n</style>\r\n"]}]}